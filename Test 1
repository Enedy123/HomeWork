    #include <iostream>
    #include <string>
    #include <vector>
    #include <algorithm>
    using namespace std;

    class Observations {
    private:
        unsigned long code;
        string birthplace;
        unsigned long population;

    public:
        Observations(unsigned long x, string y, unsigned long z) {
            code = x;
            birthplace = y;
            population = z;
        }
        Observations() = default;
        ~Observations() = default;

        unsigned long getCode() const {
            return code;
        }

        string getBirthPlace() const {
            return birthplace;
        }

        unsigned long getPopulation() const {
            return population;
        }
    };

    class MathStatistics {
    private:
        size_t getNumObjectsQuartileTheFirst() const {
            size_t n = observationCollection.size();
            return (n % 4 == 0) ? n / 4 : (n + 1) / 4;
        }

        size_t getNumObjectsMedian() const {
            size_t n = observationCollection.size();
            return (n % 2 == 0) ? n / 2 : (n + 1) / 2;
        }

        size_t getNumObjectsQuartileTheThird() const {
            size_t n = observationCollection.size();
            return ((3 * n) % 4 == 0) ? (3 * n) / 4 : ((n + 1) * 3) / 4;
        }

    public:
        std::vector<Observations> observationCollection;

        MathStatistics() = default;

        void sortObservations() {
            sort(observationCollection.begin(), observationCollection.end(),
                 [](const Observations& a, const Observations& b) {
                     return a.getPopulation() < b.getPopulation();
                 });
        }

        void printObservations() const {
            for (const auto& observation : observationCollection) {
                cout << "Code: " << observation.getCode()
                     << ", Birthplace: " << observation.getBirthPlace()
                     << ", Population: " << observation.getPopulation() << endl;
            }
        }

        float averageOfFirstQuartile() {
            size_t numObjectsInQuarter = getNumObjectsQuartileTheFirst();
            unsigned long sumPopulation = 0;

            for (size_t i = 0; i < numObjectsInQuarter; i++) {
                sumPopulation += observationCollection.at(i).getPopulation();
            }
            return static_cast<float>(sumPopulation) / numObjectsInQuarter;
        }

        float averageOfMedian() {
            size_t numObjectsInMedian = getNumObjectsMedian();
            unsigned long sumPopulation = 0;

            for (size_t i = 0; i < numObjectsInMedian; i++) {
                sumPopulation += observationCollection.at(i).getPopulation();
            }
            return static_cast<float>(sumPopulation) / numObjectsInMedian;
        }

        float averageOfThirdQuartile() {
            size_t numObjectsInQuartile = getNumObjectsQuartileTheThird();
            unsigned long sumPopulation = 0;

            for (size_t i = 0; i < numObjectsInQuartile; i++) {
                sumPopulation += observationCollection.at(i).getPopulation();
            }
            return static_cast<float>(sumPopulation) / numObjectsInQuartile;
        }

        float ArithmeticMean() {
            size_t numObjectsInArithmeticMean = observationCollection.size();
            if (numObjectsInArithmeticMean == 0)
                return 0;

            unsigned long sumPopulation = 0;
            for (size_t i = 0; i < numObjectsInArithmeticMean; i++) {
                sumPopulation += observationCollection.at(i).getPopulation();
            }
            return static_cast<float>(sumPopulation) / numObjectsInArithmeticMean;
        }

        unsigned long mode() {

            unsigned long currentValue = observationCollection[0].getPopulation();
            unsigned long currentCount = 1;
            unsigned long modeValue = currentValue;
            unsigned long modeCount = 1;

            for (size_t i = 1; i < observationCollection.size(); i++) {
                if (observationCollection[i].getPopulation() == currentValue) {
                    currentCount++;
                } else {
                    if (currentCount > modeCount) {
                        modeCount = currentCount;
                        modeValue = currentValue;
                    }
                    currentValue = observationCollection[i].getPopulation();
                    currentCount = 1;
                }
            }

            if (currentCount > modeCount) {
                modeValue = currentValue;
            }

            return modeValue;
        }

        unsigned long range() {
            unsigned long minPopulation = ULONG_MAX;
            unsigned long maxPopulation = 0;
            bool hasValuesIn = false;

            for (const auto& observation : observationCollection) {
                unsigned long population = observation.getPopulation();

                if (to_string(observation.getCode()).substr(0, 2) == "42") {

                    if (population > 0) {
                        hasValuesIn = true;

                        if (population < minPopulation) {
                            minPopulation = population;
                        }
                        if (population > maxPopulation) {
                            maxPopulation = population;
                        }
                    }
                }
            }

            if (hasValuesIn)
                return maxPopulation - minPopulation;
            else
                return 0;
        }
    };

    int main() {
    //    MathStatistics observationAnalysis;
    //    observationAnalysis.observationCollection.emplace_back(4201, "At sea", 0);
    //    observationAnalysis.observationCollection.emplace_back(1000, "Oceania and Antarctica (not further defined)", 0);
    //    observationAnalysis.observationCollection.emplace_back(1101, "Australia", 83622);
    //    observationAnalysis.observationCollection.emplace_back(4202, "Norfolk Island", 114);
    //    observationAnalysis.observationCollection.emplace_back(1199, "Australian External Territories nec", 0);
    //    observationAnalysis.observationCollection.emplace_back(1201, "New Zealand", 3378357);
    //    observationAnalysis.observationCollection.emplace_back(1300, "Melanesia (not further defined)", 0);
    //    observationAnalysis.observationCollection.emplace_back(1301, "New Caledonia", 381);
    //    observationAnalysis.observationCollection.emplace_back(1302, "Papua New Guinea", 1587);
    //    observationAnalysis.observationCollection.emplace_back(1303, "Solomon Islands", 1059);
    //    observationAnalysis.observationCollection.emplace_back(4204, "Vanuatu", 2274);
    //    observationAnalysis.observationCollection.emplace_back(1401, "Guam", 54);
    //    observationAnalysis.observationCollection.emplace_back(1402, "Kiribati", 2262);
    //    observationAnalysis.observationCollection.emplace_back(1403, "Marshall Islands", 21);
    //    observationAnalysis.observationCollection.emplace_back(1404, "Micronesia, Federated States of", 21);
    //    observationAnalysis.observationCollection.emplace_back(1405, "Nauru", 315);
    //    observationAnalysis.observationCollection.emplace_back(1406, "Northern Mariana Islands", 21);
    //    observationAnalysis.observationCollection.emplace_back(1207, "Palau", 12);
    //    observationAnalysis.observationCollection.emplace_back(1500, "Polynesia (excludes Hawaii) (not further defined)", 0);
    //    observationAnalysis.observationCollection.emplace_back(1201, "Cook Islands", 12069);
    //    observationAnalysis.observationCollection.emplace_back(1502, "Fiji", 63015);
    //    observationAnalysis.observationCollection.emplace_back(1503, "French Polynesia", 609);
    //    observationAnalysis.observationCollection.emplace_back(1504, "Niue", 4008);
    //    observationAnalysis.observationCollection.emplace_back(1505, "Samoa", 56814);
    //    observationAnalysis.observationCollection.emplace_back(1506, "Samoa, American", 882);
    //    observationAnalysis.observationCollection.emplace_back(1508, "Tonga", 27777);
    //    observationAnalysis.observationCollection.emplace_back(1507, "Tokelau", 1263);
    //
    //    observationAnalysis.sortObservations();
    //
    //    //Just to check if everything is sorted well
    //    cout << "Sorted Observations:" << endl;
    //    observationAnalysis.printObservations();
    //
    //    float averageOfFirstQuartile = observationAnalysis.averageOfFirstQuartile();
    //    float averageMedian = observationAnalysis.averageOfMedian();
    //    float averageOfThirdQuartile = observationAnalysis.averageOfThirdQuartile();
    //    float arithmeticMean = observationAnalysis.ArithmeticMean();
    //    unsigned long mode = observationAnalysis.mode();
    //    unsigned long range = observationAnalysis.range();
    //
    //    cout << "First Quartile: " << averageOfFirstQuartile << endl;
    //    cout << "Median: " << averageMedian << endl;
    //    cout << "Third Quartile: " << averageOfThirdQuartile << endl;
    //    cout << "Arithmetic Mean: " << arithmeticMean << endl;
    //    cout << "Mode: " << mode << endl;
    //    cout << "Range: " << range << endl;

        return 0;
    }

