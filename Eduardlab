#include <iostream>
#include <algorithm>
#include <stdexcept>
#include <cassert>
#include <sstream>

class Stack {
private:
    int* data;
    size_t capacity;
    size_t size;

public:
    class iterator {
    public:
        iterator() : ptr(nullptr) {}
        iterator(int* p) : ptr(p) {}
        iterator(const iterator& other) : ptr(other.ptr) {}

        iterator& operator++() {
            ++ptr;
            return *this;
        }

        iterator operator++(int) {
            iterator temp = *this;
            ++ptr;
            return temp;
        }

        iterator& operator--() {
            --ptr;
            return *this;
        }

        iterator operator--(int) {
            iterator temp = *this;
            --ptr;
            return temp;
        }

        int& operator*() {
            return *ptr;
        }

        int* operator->() {
            return ptr;
        }

        friend bool operator==(const iterator& lhs, const iterator& rhs) {
            return lhs.ptr == rhs.ptr;
        }

        friend bool operator!=(const iterator& lhs, const iterator& rhs) {
            return !(lhs == rhs);
        }

    private:
        int* ptr;
    };

    Stack() {
        data = nullptr;
        capacity = 0;
        size = 0;
    }

    Stack(size_t initial_capacity) {
        data = new int[initial_capacity];
        capacity = initial_capacity;
        size = 0;
    }

    Stack(const int* array, size_t array_size) {
        data = new int[array_size];
        capacity = array_size;
        size = array_size;
        std::copy(array, array + array_size, data);
    }

    Stack(const Stack& other) {
        data = new int[other.capacity];
        capacity = other.capacity;
        size = other.size;
        std::copy(other.data, other.data + other.size, data);
    }

    Stack(Stack&& other) noexcept {
        data = other.data;
        capacity = other.capacity;
        size = other.size;
        other.data = nullptr;
        other.capacity = 0;
        other.size = 0;
    }

    ~Stack() {
        delete[] data;
    }

    void clear() {
        delete[] data;
        data = nullptr;
        capacity = 0;
        size = 0;
    }

    int at(int index) const {
        if (index < 0) {
            index = size + index;
        }
        if (index < 0 || index >= static_cast<int>(size)) {
            if (index < 0) {
                return data[0];
            } else {
                return data[size - 1];
            }
        }
        return data[index];
    }

    void resize(size_t new_size) {
        if (new_size == capacity) return;

        int* new_data = new int[new_size];
        size_t min_size = std::min(size, new_size);

        std::copy(data, data + min_size, new_data);

        if (new_size > size) {
            std::fill(new_data + size, new_data + new_size, 0);
        }

        delete[] data;
        data = new_data;
        capacity = new_size;
        size = min_size;
    }

    void assign(size_t count, int value) {
        if (count > capacity) {
            resize(count);
        }
        std::fill(data, data + count, value);
        size = count;
    }

    bool empty() const {
        return size == 0;
    }

    void swap(Stack& other) noexcept {
        std::swap(data, other.data);
        std::swap(capacity, other.capacity);
        std::swap(size, other.size);
    }

    size_t length() const {
        return size;
    }

    iterator begin() {
        return iterator(data);
    }

    iterator end() {
        return iterator(data + size);
    }

    iterator rbegin() {
        return iterator(data + size - 1);
    }

    iterator rend() {
        return iterator(data - 1);
    }

    static bool is_equal(const Stack& lhs, const Stack& rhs) {
        if (lhs.size != rhs.size) return false;
        return std::equal(lhs.data, lhs.data + lhs.size, rhs.data);
    }

    static void print(const Stack& stack) {
        for (size_t i = 0; i < stack.size; ++i) {
            std::cout << stack.data[i] << " ";
        }
        std::cout << std::endl;
    }

    Stack& operator=(const Stack& other) {
        if (this == &other) return *this;

        int* new_data = new int[other.capacity];
        std::copy(other.data, other.data + other.size, new_data);

        delete[] data;
        data = new_data;
        capacity = other.capacity;
        size = other.size;

        return *this;
    }

    Stack& operator=(Stack&& other) noexcept {
        if (this == &other) return *this;

        delete[] data;

        data = other.data;
        capacity = other.capacity;
        size = other.size;

        other.data = nullptr;
        other.capacity = 0;
        other.size = 0;

        return *this;
    }

    friend bool operator==(const Stack& lhs, const Stack& rhs) {
        if (lhs.size != rhs.size) return false;
        return std::equal(lhs.data, lhs.data + lhs.size, rhs.data);
    }

    friend bool operator!=(const Stack& lhs, const Stack& rhs) {
        return !(lhs == rhs);
    }

    friend bool operator<(const Stack& lhs, const Stack& rhs) {
        return std::lexicographical_compare(lhs.data, lhs.data + lhs.size, rhs.data, rhs.data + rhs.size);
    }

    friend bool operator>(const Stack& lhs, const Stack& rhs) {
        return rhs < lhs;
    }

    friend bool operator<=(const Stack& lhs, const Stack& rhs) {
        return !(rhs < lhs);
    }

    friend bool operator>=(const Stack& lhs, const Stack& rhs) {
        return !(lhs < rhs);
    }

    friend std::istream& operator>>(std::istream& in, Stack& stack) {
        for (size_t i = 0; i < stack.capacity; ++i) {
            in >> stack.data[i];
        }
        stack.size = stack.capacity;
        return in;
    }

    friend std::ostream& operator<<(std::ostream& out, const Stack& stack) {
        for (size_t i = 0; i < stack.size; ++i) {
            out << stack.data[i] << " ";
        }
        return out;
    }

    int& operator[](size_t index) {
        return data[index];
    }

    const int& operator[](size_t index) const {
        return data[index];
    }

    size_t count(int value) const {
        return std::count(data, data + size, value);
    }

    bool contains(int value) const {
        return std::find(data, data + size, value) != data + size;
    }
};

int main() {
    std::stringstream ss{"1 3 5 7 9"};
    Stack a(5);
    ss >> a;
    assert(5 == a.length());
    assert(1 == a[0]);
    assert(9 == a[4]);
    std::cout << a;
    Stack b{a};
    assert(a == b);
    assert(3 == b[1]);
    assert(7 == b[3]);
    b[4] = 0;
    assert(0 == b[4]);
    assert(!b.contains(9));
    assert(b < a);
    assert(a > b);
    std::cout << b;

    std::cout << "используя итератор:" << std::endl;
    for (auto it = a.begin(); it != a.end(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;

    for (auto it = a.rbegin(); it != a.rend(); --it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;

    Stack c;
    assert(0 == c.length());
    c = b;
    assert(b == c);
    c[1] = c[2] = 7;
    assert(7 == c[1]);
    assert(7 == c[2]);
    assert(3 == c.count(7));
    std::cout << "finished successfully!" << std::endl;

    return 0;
}
